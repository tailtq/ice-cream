//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace App.Models
{
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Linq;

    public partial class Flavor
    {
        IceCreamEntities db = new IceCreamEntities();


        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Flavor()
        {
            this.Payouts = new HashSet<Payout>();
        }

        public const int STAFF = 1;

        public const int CUSTOMER = 2;
    
        public int Id { get; set; }
        public int UserId { get; set; }
        public byte UserType { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public string Images { get; set; }
        public Nullable<int> PreparationTime { get; set; }
        public Nullable<int> TotalTime { get; set; }
        public string Ingredients { get; set; }
        public string Recipe { get; set; }
        public bool IsApproved { get; set; }
        public string Slug { get; set; }
        public System.DateTime CreatedAt { get; set; }
        public System.DateTime UpdatedAt { get; set; }
        public Nullable<System.DateTime> DeletedAt { get; set; }
        public Nullable<int> DeletedBy { get; set; }
    
        public virtual Staff Staff { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Payout> Payouts { get; set; }

        public Staff AuthorStaff { get; set; }

        public Customer AuthorCustomer { get; set; }

        public int FavouriteCount { get; set; }

        public int GetFavouriteCount()
        {
            return this.FavouriteCount = db.Favourites.Where(q => q.ItemId == this.Id && q.ItemType == Favourite.FLAVORS).Count();
        }

        public string[] DecodedImages()
        {
            try
            {
                return JsonConvert.DeserializeObject<string[]>(this.Images);
            }
            catch
            {
                return new string[] { "" };
            }
        }
    }
}
